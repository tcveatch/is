<?php
//
// isapijs.php
// 

/* This program uses an IS data structure (in $NAME.php) to
   autogenerate a JS-includeable library/function file that provides
   an authenticated client-side API for IS CRUD operations. 

   To use it:
   % php isapijs.php $NAME > isapi.js

or from a browser:
   http:path.to.here/isapijs.php$NAME=yourtablename > isapi.js
 */

$debug=0;
if (defined('STDIN')) { $NAME=$argv[1];      }
else                  { $NAME=$_GET['NAME']; }
include "$NAME/$NAME.php";

echo "/* start JS library file based on $NAME.php */\n";
?>
  //
  // This file is autogenerated by php isapijs.php <?php echo $NAME;?> or
  // isapijs.php?NAME=<?php echo $NAME;?> and when included by client-side
  // JS code provides an IS API over HTTP through the server's REST-ish CRUD
  // ops (in PHP) and ultimately the server's DB for table <?php echo $NAME;?>
  //

<?php
  echo "debug=$debug;";
 ?>

function is(op,server,json,onload) {
  if      (op=="search") { return isSearch(server,json,onload); }
  else if (op=="create") { return isCreate(server,json,onload); }
  else if (op=="read"  ) { return isRead(  server,json,onload); }
  else if (op=="update") { return isUpdate(server,json,onload); }
  else if (op=="delete") { return isDelete(server,json,onload); }
  else                   { return false;                        }
}

function isSearch(server,json,onload) {
  alert("called isSearch(" + server + "," + json + ",onload)");
  const xhr = new XMLHttpRequest();
  xhr.open("GET",server,true); 
  msg = "in isSearch(), form data|JSON=" + json + ", server=" + server;
  console.log(msg);
  xhr.onload = onload;
  xhr.setRequestHeader("Content-Type","application/json; charset=utf-8");
  xhr.setRequestHeader("Access-Control-Allow-Origin",server);
  xhr.setRequestHeader("Access-Control-Allow-Methods","GET");
  xhr.send(pkg);
  alert("isSearch(): xhr.send(" + pkg + ") sent.");
  return false; // Supposedly, if we don't return false, the page will reload, overwriting modified widgets with default values.
}

function isCreate(server,json,onload) {
  const xhr = new XMLHttpRequest();
  xhr.open("POST",server,true); // POST adds a new row to the table
  msg = "in isCreate(), form data|JSON=" + json + ", server=" + server;
  console.log(msg);
  xhr.onload = onload;
  xhr.setRequestHeader("Content-Type","application/json; charset=utf-8");
  xhr.setRequestHeader("Access-Control-Allow-Origin",server);
  xhr.setRequestHeader("Access-Control-Allow-Methods","POST,PUT");
  xhr.send(pkg);
  alert("isCreate(): xhr.send(" + pkg + ") sent to url " + server);
  return false; // Supposedly, if we don't return false, the page will reload, overwriting modified widgets with default values.
}

function isRead(server,json,onload) {
  const xhr = new XMLHttpRequest();
  xhr.overrideMimeType("application/json");
  xhr.open("GET",url,true); // 
  msg = "in isRead(" + server + ",json=" + json + ",onload)";
  console.log(msg);
  xhr.onload = onload;
  xhr.setRequestHeader("Content-type","application/json; charset=utf-8"); // on send or load?
  // xhr.setRequestHeader("Access-Control-Allow-Origin",url);
  // xhr.setRequestHeader("Access-Control-Allow-Methods","PUT");
  xhr.send("");
  alert("xhr.send([Empty body]) sent to " + url);
  return false; // we don't need a whole page reload after all this work.
}

function isUpdate(server,json,onload) {
  const xhr = new XMLHttpRequest();
  xhr.open("PUT",url,true); // PUT: we know where it gets PUT so it's an update, whereas POST adds a new row to the table
  msg = "in isUpdate(), form data|JSON=" + pkg + ", url=" + url;
  console.log(msg);
  xhr.onload = onload;
  xhr.setRequestHeader("Content-type","application/json; charset=utf-8");
  xhr.setRequestHeader("Access-Control-Allow-Origin","<?php echo "$is[URL]/$is[Path]/$is[Name]/"; ?>");
  xhr.setRequestHeader("Access-Control-Allow-Methods","PUT");
  xhr.send(pkg);
  alert("xhr.send(" + pkg + ") sent.");
}

function isDelete(server,json,onload) {
  const xhr = new XMLHttpRequest();
  xhr.open("DELETE",server,true); // XXX careful now, do we want anyone to be able to DELETE anything?
  msg = "in isDelete(), id=" + json;
  console.log(msg);
  xhr.onload = onload;
  xhr.setRequestHeader("Content-type","application/json; charset=utf-8");
  xhr.send(json);
  alert("xhr.send(" + pkg + ") sent.");
  return false; // false here prevents form submission after onload i.e. full page reload.
  
}
