<?php
  //
  // isphp.php (PHP generating PHP)
  //

  /* This program uses an IS data structure (in $NAME.php) to
     autogenerate a PHP-includeable library/function file that provides
     an authenticated server API to those SQL CRUD operations on
     server's DB returning CRUD results to client.

     To use it:
     % php isphp.php $NAME
     or from a browser:
     http:path.to.here/isphp.php$NAME=yourtablename
   */
  /* Bug trail:

   x learn to use error_log()
   x condition $_POST, $input on having it set
   x Handle nonexistent REQUEST_METHOD (when called on command-line)
   x add $link arg to mysqli_error().
   x Table tv.Test doesn't exist. got isTest.db create_table to work.
   x added data to xhr.send().
   x with Content-type: application/json headers reading the php://input produces a string.
   x Again php Test/isTest.php says Table tv.Test doesn't exist: Test/isTest.db create_table yet again!
   x input an Object unless json_decode(..,TRUE).  Fixed.
   x empty query, sql undefined: edge case found and replaced with a Delete op
   x figured out how to get data into the server code: json_decode(file_get_contents(php://input))
   curl works but a form from a browser doesn't.
   syntax errors for make tc
     mysqli_query returns "1"  (and row is created) but mysqli_info() returns NULL.
   syntax errors for make tr
   syntax errors for make tu
   syntax errors for make td
   how? after isTest.php we get Navigated to /?<form-data>
   	since trying to send JSON, set header for application/json
	also since JSON, upon failure to get approval, it backs up,
	     re-encodes JSON as overwritten URL ?a=b&c=d..\
	     and tries again but breaking the URL.
   how? after isTest.php we get Navigated to tomveatch.co
      first it's xhr.send(l) to isTest.php; then into lala land.
      sql undefined isTest.php line 87.
   CRUD ops don't have data.
   don't know how to get data back from the server code to the client.
   don't know the URL the form hits or where it hits it, nor where that gets its results back.
      it's in the form in isjs.php addCreate() or something.
   */
  $debug=1;
  if (defined('STDIN')) { $NAME=$argv[1];      }
  else                  { $NAME=$_GET['NAME']; }
  include "$NAME/$NAME.php";

  echo "<?" . "php \n";
?>
  //
  // This PHP program was generated by php isphp.php <?php echo $NAME;?> or isphp.php?NAME=<?php echo $NAME;?> 
  // and provides an IS API to the DB <?php echo $is['DBName'];?> for table <?php echo $is['TableName']; ?> 
  //

  // The URL of this program provides a REST-ish API on HTTP requests with JSON data in the HTTP message body.
  // The HTTP method GET|PUT|POST|DELETE determines the REST function READ/SEARCH|UPDATE|CREATE|DELETE.
  // (previous draft had the table and operation in the URL as &is=$tablename&$op=S|C|R|U|D.
  
/* Second Draft: use php_crud_api approach: use HTTP METHOD to select
 * CRUD op, and direct mysql calls in here.
 */

$debug   = 0;
$method  = (isset($_SERVER["REQUEST_METHOD"]) ? $_SERVER["REQUEST_METHOD"] : "NONE");
error_log("method=$method\n",3,"/tmp/isphp.err");
$request = (isset($_SERVER['PATH_INFO']) && $_SERVER['PATH_INFO']!=""
	    ? explode('/', trim($_SERVER['PATH_INFO'],'/')) 
	    : "" );
$phpinput = file_get_contents('php://input',true);
error_log("php://input=" . ($phpinput==""?"empty":$phpinput),3,"/tmp/isphp.err");
$input = ($phpinput!="" ? json_decode($phpinput,1) : NULL);

if ($method=="POST") {
  if (isset($_POST)) { // only for POST method
    error_log("_POST: [" . join(":",array_keys($_POST)) . "]=>[" . join(":",array_values($_POST)) . "]\n",  3,"/tmp/isphp.err");
  } else {
    error_log("_POST not set.\n",3,"/tmp/isphp.err");
  }
}

// connect to the mysql database
$link = mysqli_connect('localhost', 
      		       '<?php echo $is['User'];?>', 
      	               '<?php echo $is['Pwd'];?>', 
      		       '<?php echo $is['DBName'];?>');
mysqli_set_charset($link,'utf8');
 
// retrieve the table and key from the path
$table = "<?php echo $is['TableName']; ?>"; // was preg_replace('/[^a-z0-9_]+/i','',array_shift($request));

// To do a row select or update, ensure the input json contains a rowid element.
if ($method=="DELETE" || $method=="GET" || $method=="PUT") { // these need to know the row to work on.
  $rowid = ($input!=NULL ? $input['id'] : -1);
}
 
// escape the columns and values from the input object
$columns = ((isset($input) && $input != NULL)
	 ? preg_replace('/[^a-z0-9_]+/i','',array_keys($input))
         : [] );
$values  = ((isset($input) && $input != "")
	 ? array_map(function ($value) use ($link) {
	     if ($value===null) return null;
	     return mysqli_real_escape_string($link,(string)$value);
	   },array_values($input))
	 : [] );
/* was: 
   $columns = preg_replace('/[^a-z0-9_]+/i','',array_keys($input));
   $values = array_map(function ($value) use ($link) {
     if ($value===null) return null;
     return mysqli_real_escape_string($link,(string)$value);
   },array_values($input));
 
   // build the SET part of the SQL command
   $set = '';
   for ($i=0;$i<count($columns);$i++) {
     $set.=($i>0?',':'').'`'.$columns[$i].'`=';
     $set.=($values[$i]===null?'NULL':'"'.$values[$i].'"');
   }
 */
 
// create SQL based on HTTP method
$set="`TestN`=45";
$key="1";
switch ($method) {
  case 'NONE':   // Get ID 1
  case 'GET':    // Read or Search
    $sql = "SELECT * FROM `$table`".($rowid?" WHERE id=$rowid":($search?" WHERE $search":''));
    break;
  case 'PUT':    // Update (PUT=store something at a given place (since id must therefore be known, this is an UPDATE)
       		 // respond with 200 OK.  Parse Content-* headers or reply with 501 Not Implemented.
    $sql = "UPDATE `$table` SET $set WHERE id=$rowid";
    break;
  case 'POST':   // Create (POST=put something subordinate to, into the DB, thus a new id, this is a CREATE)
       		 // reply with 201 Created + entity with id + Location: header.
    $sql = "INSERT INTO `$table` (`" . implode("`,`",$columns) ."`) VALUES ('" . implode("','",$values) . "');";
    break;
  case 'DELETE': // Delete
  default:
    $sql = "DELETE FROM `$table` WHERE id=$rowid";
    break;
}
 
// execute SQL statement
$result = mysqli_query($link,$sql);
$rs = print_r($result,TRUE); // $ls = print_r($link,TRUE); 
error_log("45: mysqli_query() returned \"{$rs}\" on sql: $sql\n",3,"/tmp/isphp.err");
if (!$result) {
  $es = "Null return from mysqli_query(): " . mysqli_error($link) . "\n";
  // console.log($es); this code is run on the server, output not seen on client browser.
  error_log($es,3,"/tmp/isphp.err");

  // die if SQL statement failed
  http_response_code(404);
  error_log("No result, die with mysqli_error = " . mysqli_error($link),3,"/tmp/isphp.err");
  die(mysqli_error($link));
}
$str = mysqli_info($link);

function var_error_log( $object=null ){
    ob_start();                    // start buffer capture
    var_dump( $object );           // dump the values
    $contents = ob_get_contents(); // put the buffer into a variable
    ob_end_clean();                // end capture
    error_log( $contents );        // log contents of the result of var_dump( $object )
}

// print results, insert id or affected row count
if ($method == 'GET') {
  if (!$key) echo '[';
  for ($i=0;$i<mysqli_num_rows($result);$i++) {
    echo ($i>0?',':'').json_encode(mysqli_fetch_object($result));
  }
  if (!$key) echo ']';
  preg_match_all('/(\S[^:]+): (\d+)/', $str, $matches);
  $info = array_combine ($matches[1], $matches[2]);
  if ($info ['Rows matched'] == 0) {
        echo "HTTP " . ($method=='PUT'?"PUT, mysql UPDATE":"POST, mysql INSERT") . " did not match any rows.\n";
  } elseif ($info ['Changed'] == 0) {
        echo "HTTP " . ($method=='PUT'?"PUT, mysql UPDATE":"POST, mysql INSERT") . "  matched rows, but none required updating.\n";
  }
  if ($info ['Changed'] < $info ['Rows matched']) {
        echo ($info ['Rows matched'] - $info ['Changed'])." rows matched but were not changed.\n";
  }
} elseif ($method == 'POST') {
  error_log("POST mysqli_info: $str",3,"/tmp/isphp.err");
  preg_match_all ('/(\S[^:]+): (\d+)/', $str, $matches);
  $info = array_combine($matches[1], $matches[2]);
  if ($info==NULL) {
    error_log("No results from mysqli_info()\n",3,"/tmp/isphp.err");
  } else {
    var_dump($info);
    echo "HTTP POST, mysql INSERT modified " . $info ['Records'] . " rows.\n";
    if ($info ['Duplicates'] != 0) {
     echo "HTTP POST, mysql INSERT found " . $info ['Records'] . " duplicate rows.\n";
    }
    if ($info ['Duplicates'] != 0) {
      echo "HTTP POST, mysql INSERT generated " . $info ['Warnings'] . " warnings.\n";
    }
  }
} else {
  echo mysqli_affected_rows($link);
}
 
// close mysql connection
mysqli_close($link);

<?php
  echo "?" . ">\n";
 ?>
